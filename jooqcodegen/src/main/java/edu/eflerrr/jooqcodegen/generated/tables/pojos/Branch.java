/*
 * This file is generated by jOOQ.
 */

package edu.eflerrr.jooqcodegen.generated.tables.pojos;

import jakarta.validation.constraints.Size;
import java.beans.ConstructorProperties;
import java.io.Serializable;
import java.time.OffsetDateTime;
import javax.annotation.processing.Generated;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;

/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.19.6"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({"all", "unchecked", "rawtypes", "this-escape"})
public class Branch implements Serializable {

    private static final long serialVersionUID = 1L;

    private Long id;
    private String repositoryOwner;
    private String repositoryName;
    private String branchName;
    private OffsetDateTime lastCommitTime;

    public Branch() {
    }

    public Branch(Branch value) {
        this.id = value.id;
        this.repositoryOwner = value.repositoryOwner;
        this.repositoryName = value.repositoryName;
        this.branchName = value.branchName;
        this.lastCommitTime = value.lastCommitTime;
    }

    @ConstructorProperties({"id", "repositoryOwner", "repositoryName", "branchName", "lastCommitTime"})
    public Branch(
        @Nullable Long id,
        @NotNull String repositoryOwner,
        @NotNull String repositoryName,
        @NotNull String branchName,
        @NotNull OffsetDateTime lastCommitTime
    ) {
        this.id = id;
        this.repositoryOwner = repositoryOwner;
        this.repositoryName = repositoryName;
        this.branchName = branchName;
        this.lastCommitTime = lastCommitTime;
    }

    /**
     * Getter for <code>Branch.id</code>.
     */
    @Nullable
    public Long getId() {
        return this.id;
    }

    /**
     * Setter for <code>Branch.id</code>.
     */
    public void setId(@Nullable Long id) {
        this.id = id;
    }

    /**
     * Getter for <code>Branch.repository_owner</code>.
     */
    @jakarta.validation.constraints.NotNull
    @Size(max = 1000000000)
    @NotNull
    public String getRepositoryOwner() {
        return this.repositoryOwner;
    }

    /**
     * Setter for <code>Branch.repository_owner</code>.
     */
    public void setRepositoryOwner(@NotNull String repositoryOwner) {
        this.repositoryOwner = repositoryOwner;
    }

    /**
     * Getter for <code>Branch.repository_name</code>.
     */
    @jakarta.validation.constraints.NotNull
    @Size(max = 1000000000)
    @NotNull
    public String getRepositoryName() {
        return this.repositoryName;
    }

    /**
     * Setter for <code>Branch.repository_name</code>.
     */
    public void setRepositoryName(@NotNull String repositoryName) {
        this.repositoryName = repositoryName;
    }

    /**
     * Getter for <code>Branch.branch_name</code>.
     */
    @jakarta.validation.constraints.NotNull
    @Size(max = 1000000000)
    @NotNull
    public String getBranchName() {
        return this.branchName;
    }

    /**
     * Setter for <code>Branch.branch_name</code>.
     */
    public void setBranchName(@NotNull String branchName) {
        this.branchName = branchName;
    }

    /**
     * Getter for <code>Branch.last_commit_time</code>.
     */
    @jakarta.validation.constraints.NotNull
    @NotNull
    public OffsetDateTime getLastCommitTime() {
        return this.lastCommitTime;
    }

    /**
     * Setter for <code>Branch.last_commit_time</code>.
     */
    public void setLastCommitTime(@NotNull OffsetDateTime lastCommitTime) {
        this.lastCommitTime = lastCommitTime;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        final Branch other = (Branch) obj;
        if (this.id == null) {
            if (other.id != null) {
                return false;
            }
        } else if (!this.id.equals(other.id)) {
            return false;
        }
        if (this.repositoryOwner == null) {
            if (other.repositoryOwner != null) {
                return false;
            }
        } else if (!this.repositoryOwner.equals(other.repositoryOwner)) {
            return false;
        }
        if (this.repositoryName == null) {
            if (other.repositoryName != null) {
                return false;
            }
        } else if (!this.repositoryName.equals(other.repositoryName)) {
            return false;
        }
        if (this.branchName == null) {
            if (other.branchName != null) {
                return false;
            }
        } else if (!this.branchName.equals(other.branchName)) {
            return false;
        }
        if (this.lastCommitTime == null) {
            if (other.lastCommitTime != null) {
                return false;
            }
        } else if (!this.lastCommitTime.equals(other.lastCommitTime)) {
            return false;
        }
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.id == null) ? 0 : this.id.hashCode());
        result = prime * result + ((this.repositoryOwner == null) ? 0 : this.repositoryOwner.hashCode());
        result = prime * result + ((this.repositoryName == null) ? 0 : this.repositoryName.hashCode());
        result = prime * result + ((this.branchName == null) ? 0 : this.branchName.hashCode());
        result = prime * result + ((this.lastCommitTime == null) ? 0 : this.lastCommitTime.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("Branch (");

        sb.append(id);
        sb.append(", ").append(repositoryOwner);
        sb.append(", ").append(repositoryName);
        sb.append(", ").append(branchName);
        sb.append(", ").append(lastCommitTime);

        sb.append(")");
        return sb.toString();
    }
}
