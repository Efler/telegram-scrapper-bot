/*
 * This file is generated by jOOQ.
 */

package edu.eflerrr.jooqcodegen.generated.tables;

import edu.eflerrr.jooqcodegen.generated.DefaultSchema;
import edu.eflerrr.jooqcodegen.generated.Keys;
import edu.eflerrr.jooqcodegen.generated.tables.Tracking.TrackingPath;
import edu.eflerrr.jooqcodegen.generated.tables.records.LinkRecord;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;
import javax.annotation.processing.Generated;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.19.6"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({"all", "unchecked", "rawtypes", "this-escape"})
public class Link extends TableImpl<LinkRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>Link</code>
     */
    public static final Link LINK = new Link();

    /**
     * The class holding records for this type
     */
    @Override
    @NotNull
    public Class<LinkRecord> getRecordType() {
        return LinkRecord.class;
    }

    /**
     * The column <code>Link.id</code>.
     */
    public final TableField<LinkRecord, Long> ID =
        createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>Link.url</code>.
     */
    public final TableField<LinkRecord, String> URL =
        createField(DSL.name("url"), SQLDataType.VARCHAR(1000000000).nullable(false), this, "");

    /**
     * The column <code>Link.created_at</code>.
     */
    public final TableField<LinkRecord, OffsetDateTime> CREATED_AT =
        createField(DSL.name("created_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false), this, "");

    /**
     * The column <code>Link.checked_at</code>.
     */
    public final TableField<LinkRecord, OffsetDateTime> CHECKED_AT =
        createField(DSL.name("checked_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false), this, "");

    /**
     * The column <code>Link.updated_at</code>.
     */
    public final TableField<LinkRecord, OffsetDateTime> UPDATED_AT =
        createField(DSL.name("updated_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false), this, "");

    private Link(Name alias, Table<LinkRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Link(Name alias, Table<LinkRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>Link</code> table reference
     */
    public Link(String alias) {
        this(DSL.name(alias), LINK);
    }

    /**
     * Create an aliased <code>Link</code> table reference
     */
    public Link(Name alias) {
        this(alias, LINK);
    }

    /**
     * Create a <code>Link</code> table reference
     */
    public Link() {
        this(DSL.name("Link"), null);
    }

    public <O extends Record> Link(
        Table<O> path,
        ForeignKey<O, LinkRecord> childPath,
        InverseForeignKey<O, LinkRecord> parentPath
    ) {
        super(path, childPath, parentPath, LINK);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class LinkPath extends Link implements Path<LinkRecord> {

        private static final long serialVersionUID = 1L;

        public <O extends Record> LinkPath(
            Table<O> path,
            ForeignKey<O, LinkRecord> childPath,
            InverseForeignKey<O, LinkRecord> parentPath
        ) {
            super(path, childPath, parentPath);
        }

        private LinkPath(Name alias, Table<LinkRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public LinkPath as(String alias) {
            return new LinkPath(DSL.name(alias), this);
        }

        @Override
        public LinkPath as(Name alias) {
            return new LinkPath(alias, this);
        }

        @Override
        public LinkPath as(Table<?> alias) {
            return new LinkPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    @Nullable
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    @NotNull
    public Identity<LinkRecord, Long> getIdentity() {
        return (Identity<LinkRecord, Long>) super.getIdentity();
    }

    @Override
    @NotNull
    public UniqueKey<LinkRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_24;
    }

    @Override
    @NotNull
    public List<UniqueKey<LinkRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.CONSTRAINT_242);
    }

    private transient TrackingPath _tracking;

    /**
     * Get the implicit to-many join path to the <code>PUBLIC.Tracking</code>
     * table
     */
    public TrackingPath tracking() {
        if (_tracking == null) {
            _tracking = new TrackingPath(this, null, Keys.CONSTRAINT_4F9.getInverseKey());
        }

        return _tracking;
    }

    @Override
    @NotNull
    public Link as(String alias) {
        return new Link(DSL.name(alias), this);
    }

    @Override
    @NotNull
    public Link as(Name alias) {
        return new Link(alias, this);
    }

    @Override
    @NotNull
    public Link as(Table<?> alias) {
        return new Link(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    @NotNull
    public Link rename(String name) {
        return new Link(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    @NotNull
    public Link rename(Name name) {
        return new Link(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    @NotNull
    public Link rename(Table<?> name) {
        return new Link(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @NotNull
    public Link where(Condition condition) {
        return new Link(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @NotNull
    public Link where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @NotNull
    public Link where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @NotNull
    public Link where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @NotNull
    @PlainSQL
    public Link where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @NotNull
    @PlainSQL
    public Link where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @NotNull
    @PlainSQL
    public Link where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @NotNull
    @PlainSQL
    public Link where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @NotNull
    public Link whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @NotNull
    public Link whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
