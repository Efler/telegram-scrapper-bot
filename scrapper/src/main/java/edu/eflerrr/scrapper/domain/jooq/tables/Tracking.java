/*
 * This file is generated by jOOQ.
 */

package edu.eflerrr.scrapper.domain.jooq.tables;

import edu.eflerrr.scrapper.domain.jooq.DefaultSchema;
import edu.eflerrr.scrapper.domain.jooq.Keys;
import edu.eflerrr.scrapper.domain.jooq.tables.Chat.ChatPath;
import edu.eflerrr.scrapper.domain.jooq.tables.Link.LinkPath;
import edu.eflerrr.scrapper.domain.jooq.tables.records.TrackingRecord;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;
import javax.annotation.processing.Generated;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.19.6"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({"all", "unchecked", "rawtypes", "this-escape"})
public class Tracking extends TableImpl<TrackingRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>Tracking</code>
     */
    public static final Tracking TRACKING = new Tracking();

    /**
     * The class holding records for this type
     */
    @Override
    @NotNull
    public Class<TrackingRecord> getRecordType() {
        return TrackingRecord.class;
    }

    /**
     * The column <code>Tracking.id</code>.
     */
    public final TableField<TrackingRecord, Long> ID =
        createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>Tracking.chat_id</code>.
     */
    public final TableField<TrackingRecord, Long> CHAT_ID =
        createField(DSL.name("chat_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>Tracking.link_id</code>.
     */
    public final TableField<TrackingRecord, Long> LINK_ID =
        createField(DSL.name("link_id"), SQLDataType.BIGINT.nullable(false), this, "");

    private Tracking(Name alias, Table<TrackingRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Tracking(Name alias, Table<TrackingRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>Tracking</code> table reference
     */
    public Tracking(String alias) {
        this(DSL.name(alias), TRACKING);
    }

    /**
     * Create an aliased <code>Tracking</code> table reference
     */
    public Tracking(Name alias) {
        this(alias, TRACKING);
    }

    /**
     * Create a <code>Tracking</code> table reference
     */
    public Tracking() {
        this(DSL.name("Tracking"), null);
    }

    public <O extends Record> Tracking(
        Table<O> path,
        ForeignKey<O, TrackingRecord> childPath,
        InverseForeignKey<O, TrackingRecord> parentPath
    ) {
        super(path, childPath, parentPath, TRACKING);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class TrackingPath extends Tracking implements Path<TrackingRecord> {

        private static final long serialVersionUID = 1L;

        public <O extends Record> TrackingPath(
            Table<O> path,
            ForeignKey<O, TrackingRecord> childPath,
            InverseForeignKey<O, TrackingRecord> parentPath
        ) {
            super(path, childPath, parentPath);
        }

        private TrackingPath(Name alias, Table<TrackingRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public TrackingPath as(String alias) {
            return new TrackingPath(DSL.name(alias), this);
        }

        @Override
        public TrackingPath as(Name alias) {
            return new TrackingPath(alias, this);
        }

        @Override
        public TrackingPath as(Table<?> alias) {
            return new TrackingPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    @Nullable
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    @NotNull
    public Identity<TrackingRecord, Long> getIdentity() {
        return (Identity<TrackingRecord, Long>) super.getIdentity();
    }

    @Override
    @NotNull
    public UniqueKey<TrackingRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_4;
    }

    @Override
    @NotNull
    public List<ForeignKey<TrackingRecord, ?>> getReferences() {
        return Arrays.asList(Keys.CONSTRAINT_4F, Keys.CONSTRAINT_4F9);
    }

    private transient ChatPath _chat;

    /**
     * Get the implicit join path to the <code>PUBLIC.Chat</code> table.
     */
    public ChatPath chat() {
        if (_chat == null) {
            _chat = new ChatPath(this, Keys.CONSTRAINT_4F, null);
        }

        return _chat;
    }

    private transient LinkPath _link;

    /**
     * Get the implicit join path to the <code>PUBLIC.Link</code> table.
     */
    public LinkPath link() {
        if (_link == null) {
            _link = new LinkPath(this, Keys.CONSTRAINT_4F9, null);
        }

        return _link;
    }

    @Override
    @NotNull
    public Tracking as(String alias) {
        return new Tracking(DSL.name(alias), this);
    }

    @Override
    @NotNull
    public Tracking as(Name alias) {
        return new Tracking(alias, this);
    }

    @Override
    @NotNull
    public Tracking as(Table<?> alias) {
        return new Tracking(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    @NotNull
    public Tracking rename(String name) {
        return new Tracking(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    @NotNull
    public Tracking rename(Name name) {
        return new Tracking(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    @NotNull
    public Tracking rename(Table<?> name) {
        return new Tracking(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @NotNull
    public Tracking where(Condition condition) {
        return new Tracking(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @NotNull
    public Tracking where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @NotNull
    public Tracking where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @NotNull
    public Tracking where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @NotNull
    @PlainSQL
    public Tracking where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @NotNull
    @PlainSQL
    public Tracking where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @NotNull
    @PlainSQL
    public Tracking where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @NotNull
    @PlainSQL
    public Tracking where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @NotNull
    public Tracking whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @NotNull
    public Tracking whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
