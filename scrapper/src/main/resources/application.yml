app:
  use-queue: true
  api:
    github-base-url: https://api.github.com
    stackoverflow-base-url: https://api.stackexchange.com
    bot-base-url: http://localhost:8090
  scheduler:
    enable: false
    interval: 30s
    force-check-delay: 60s
  data-access-type: jpa
  kafka:
    bootstrap-servers: localhost:9093
    topic:
      name: updates
      partitions: 1
      replication-factor: 1
    producer:
      client-id: scrapper
      acks: 1
  retry:
    bot-client:
      enable: true
      retry-status-codes:
        - 500
      backoff-policy: constant
      max-attempts: -1
      initial-interval: 2s
      multiplier: 2.0
    github-client:
      enable: false
      retry-status-codes:
        - 403
      backoff-policy: linear
      max-attempts: -1
      initial-interval: 2s
      multiplier: 2.0
    stackoverflow-client:
      enable: false
      retry-status-codes:
        - 403
      backoff-policy: linear
      max-attempts: -1
      initial-interval: 2s
      multiplier: 2.0

spring:
  cache:
    cache-names:
      - rate-limit-buckets
    caffeine:
      spec: maximumSize=100000,expireAfterAccess=3600s
  datasource:
    url: jdbc:postgresql://localhost:5432/scrapper
    username: postgres
    password: postgres
    driver-class-name: org.postgresql.Driver
  application:
    name: scrapper
  liquibase:
    enabled: false
  jooq:
    sql-dialect: POSTGRES
  jpa:
    hibernate:
      ddl-auto: validate
    database-platform: org.hibernate.dialect.PostgreSQLDialect
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: true
        physical_naming_strategy: edu.eflerrr.scrapper.configuration.hibernate.CustomPhysicalNamingStrategy
    show-sql: false

bucket4j:
  enabled: true
  filters:
    - cache-name: rate-limit-buckets
      url: .*
      rate-limits:
        - cache-key: "@securityService.getClientIP(#this)"
          bandwidths:
            - capacity: 5
              time: 60
              unit: seconds

springdoc:
  swagger-ui:
    path: /swagger-ui

server:
  port: 8080

logging:
  config: classpath:log4j2-plain.xml

management:
  server:
    port: 12080
  endpoints:
    web:
      base-path: /
      exposure:
        include:
          - info
          - health
          - prometheus
      path-mapping:
        prometheus: metrics
  metrics:
    tags:
      application: ${spring.application.name}
